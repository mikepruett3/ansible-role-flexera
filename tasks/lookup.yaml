---
# Lookup tasks file for ansible-role-flexera

- name: "Check for Managesoft install directory"
  ansible.builtin.stat:
    path: /opt/managesoft
  register: result
  ignore_errors: true

- name: "Set Facts for Managesoft install directory"
  ansible.builtin.set_fact:
    managesoft_home: /opt/managesoft
  when:
    - result.stat.exists
    - result.stat.isdir
    - result.failed is false

- name: "Set Facts for Install variable"
  ansible.builtin.set_fact:
    install: true
  when:
    - managesoft_home is not defined
    - result.failed is true

- name: "Check for Managesoft config directory"
  ansible.builtin.stat:
    path: /var/opt/managesoft
  register: result
  ignore_errors: true

- name: "Set Facts for Managesoft config directory"
  ansible.builtin.set_fact:
    managesoft_config_dir: /var/opt/managesoft
  when:
    - result.stat.exists
    - result.stat.isdir
    - result.failed is false

- name: "Collect fingerprint of the Managesoft Certificate"
  ansible.builtin.shell:
    cmd: openssl x509 -noout -fingerprint -sha256 -inform pem -in '{{ managesoft_config_dir }}/etc/ssl/cert.pem'
  register: result

- name: "Set Facts for Managesoft Certificate fingerprint"
  ansible.builtin.set_fact:
    certificate: "{{ result.stdout | split('=') | last }}"
  when:
    - result.failed is false

- name: "Download Flexera Certificate file to /tmp"
  ansible.builtin.get_url:
    url: "{{ software_url }}/{{ cert_file }}"
    dest: "/tmp/"
    validate_certs: no
    mode: '0774'

- name: "Collect fingerprint of the latest Managesoft Certificate"
  ansible.builtin.shell:
    cmd: openssl x509 -noout -fingerprint -sha256 -inform pem -in '/tmp/{{ cert_file }}'
  register: result

- name: "Set Facts for latest Managesoft Certificate fingerprint"
  ansible.builtin.set_fact:
    certificate_latest: "{{ result.stdout | split('=') | last }}"
  when:
    - result.failed is false

- name: "Set Facts for Cert_Replace variable"
  ansible.builtin.set_fact:
    cert_replace: true
  when:
    - certificate is defined
    - certificate_latest is defined
    - certificate != certificate_latest

- name: "Check for Managesoft Configuration INI File"
  ansible.builtin.stat:
    path: "{{ managesoft_config_dir }}/etc/config.ini"
  register: result

#- name: "Set Facts for Managesoft Configuration INI File"
#  ansible.builtin.set_fact:
#    config_file: "{{ managesoft_config_dir }}/etc/config.ini"
#  when:
#    - result.stat.exists
#    - result.failed is false

- name: "Read from Managesoft Configuration INI File"
  ansible.builtin.shell:
    cmd: "cat {{ managesoft_config_dir }}/etc/config.ini | grep -iP 'ETCPVersion='"
  register: result

- name: "Get the version of installed Flexera Inventory Agent"
  debug:
    var: result.stdout
  when:
    - result.stat.exists
    - result.failed is false

  #ansible.builtin.shell:
  #  cmd: ./splunk version | tail -n 1 | awk '{ print $4 }'
  #  chdir: "{{ splunk_home }}/bin"
  #register: result
  #when:
  #  - splunk_home is defined

#- name: "Set Facts for installed Universal Forwarder Client version"
#  ansible.builtin.set_fact:
#    splunk_version: "{{ result.stdout }}"
#  when:
#    - result.failed is false

#- name: "Set Facts for Upgrade variable"
#  ansible.builtin.set_fact:
#    upgrade: true
#  when:
#    - splunk_version is defined
#    - splunk_version != package_version
#    #- splunk_version != '7'
